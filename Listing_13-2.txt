// Listing 13.2 introduces assembly of multiplication instructions
//   1) Assembles 32-bit ARM multiplication instructions
//   2) Dumps 32-bit words from memory in hexadecimal
//
// Modules and macros contained in this file:
//   1) CPU_UI: User Interface that dumps all 32 bits of word at one time
//   2) Macros for only assembling ARM multiplication instructions
//   3) ProgMod: Memory containing "ARM" program

//
//---------------- User Interface ----------------
//
module CPU_UI (SW, KEY, LEDR, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7);
 input  [4:0] SW;
 input  [1:0] KEY;
 output [4:0] LEDR;
 output [7:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;
 function automatic [7:0] digit;
  input [3:0] num; 
  case (num)
   0:  digit = 8'b11000000;  // 0
   1:  digit = 8'b11111001;  // 1
   2:  digit = 8'b10100100;  // 2
   3:  digit = 8'b10110000;  // 3
   4:  digit = 8'b10011001;  // 4
   5:  digit = 8'b10010010;  // 5
   6:  digit = 8'b10000010;  // 6
   7:  digit = 8'b11111000;  // 7
   8:  digit = 8'b10000000;  // 8
   9:  digit = 8'b10010000;  // 9
   10: digit = 8'b10001000;  // A
   11: digit = 8'b10000011;  // b
   12: digit = 8'b11000110;  // C
   13: digit = 8'b10100001;  // d
   14: digit = 8'b10000110;  // E
   15: digit = 8'b10001110;  // F
  endcase
 endfunction
 wire [31:0] IR;
 assign HEX0 = digit(IR[3:0]);
 assign HEX1 = digit(IR[7:4]);
 assign HEX2 = digit(IR[11:8]);
 assign HEX3 = digit(IR[15:12]);
 assign HEX4 = digit(IR[19:16]);
 assign HEX5 = digit(IR[23:20]);
 assign HEX6 = digit(IR[27:24]);
 assign HEX7 = digit(IR[31:28]);
 assign LEDR = SW;
 ProgMod (SW[4:0], ~KEY[1], ~KEY[0], IR);
endmodule

//
//---------------- Macro defintions for assembly language ----------------
//
 `define _1   ,0,0,0,0,0,0,0);  // End instruction of 1 field
 `define _2   ,0,0,0,0,0,0);    // End instruction of 2 fields
 `define _3   ,0,0,0,0,0);      // End instruction of 3 fields
 `define _4   ,0,0,0,0);        // End instruction of 4 fields
 `define _5   ,0,0,0);          // End instruction of 5 fields
 `define _6   ,0,0);            // End instruction of 6 fields
 `define _7   ,0);              // End instruction of 7 fields
 `define _8   );                // End instruction of 8 fields
 `define MUL   asmul (3'b000, // Multiply giving 32-bit product
 `define MLA   asmul (3'b001, // Multiply, accumulate 32-bit product
 `define UMULL asmul (3'b100, // Unsigned 64-bit product
 `define UMLAL asmul (3'b101, // Unsigned 64-bit product, accumulate
 `define SMULL asmul (3'b110, // Signed 64-bit product
 `define SMLAL asmul (3'b111, // Signed 64-bit product, accumulate
 
 `define EQ 4'b0000, // EQual (zero); Z set
 `define NE 4'b0001, // Not Equal (non-zero); Z clear
 `define HS 4'b0010, // Unsigned Higher or Same; C set -- also "CS"
 `define CS 4'b0010, // Carry set
 `define LO 4'b0011, // Unsigned LOwer; C clear --also "CC"
 `define CC 4'b0011, // Carry clear
 `define MI 4'b0100, // MInus or negative; N set
 `define PL 4'b0101, // PLus or positive; N clear
 `define VS 4'b0110, // Overflow; V Set
 `define VC 4'b0111, // No overflow; V Clear
 `define HI 4'b1000, // Unsigned HIgher; C set and Z clear
 `define LS 4'b1001, // Unsigned Lower or Same; C clear or Z set
 `define GE 4'b1010, // Signed Greater than or Equal to; N equals V
 `define LT 4'b1011, // Signed Less Than; N not same as V
 `define GT 4'b1100, // Signed Greater Than; Z clear and N equals V
 `define LE 4'b1101, // Signed Less than or Equal; Z set or N not same as V
 `define AL 4'b1110, // ALways; any status bits OK -- usually omitted
 `define S  4'b1111, // Status update (code for NeVer, i.e., reserved)

//
//---------------- Memory containing "ARM" program ----------------
//
module ProgMod (address, clk, reset, instr);
 input  [4:0] address;
 input clk, reset;
 output [31:0] instr;
 
 parameter R0  = 16'h1000; // General purpose register set names
 parameter R1  = 16'h1001;
 parameter R2  = 16'h1002;
 parameter R3  = 16'h1003;
 parameter R4  = 16'h1004;
 parameter R5  = 16'h1005;
 parameter R6  = 16'h1006;
 parameter R7  = 16'h1007;
 parameter R8  = 16'h1008;
 parameter R9  = 16'h1009;
 parameter R10 = 16'h100A;
 parameter R11 = 16'h100B;
 parameter R12 = 16'h100C;
 parameter R13 = 16'h100D; // a.k.a. "SP"
 parameter R14 = 16'h100E; // a.k.a. "LR"
 parameter R15 = 16'h100F; // a.k.a. "PC"

// ----- Tasks and Functions that implement the "assembler" -----

 integer IP;

// Task asmul is called by multiplication opcode macros `MUL, `MLA, `UMULL...
// The number of parameters will vary between three and seven.
 // `MLA`EQ`S  R1,R2,R3,R4      `_7 // General format with 7 parameters
 // `MUL       R1,R2            `_3 // Some parameters are optional

 task asmul ();
  input [15:0] P0,P1,P2,P3,P4,P5,P6,P7;
  progMem[IP] <= asmul1(P0,P1,P2,P3,P4,P5,P6);
  IP = IP + 1;
 endtask

// Function asmul1 is called by task asmul to construct the opcode, condition, and status fields.
 // `MUL      Format 1: Always multiply, but don't set status
 // `MUL`S    Format 2: Always multiply, and also update status
 // `MUL`EQ   Format 3: Multiply only if Z-flag, but don't set status
 // `MUL`EQ`S Format 4: Multiply and update status only if Z-flag set

 function [31:0] asmul1 ();
  input [15:0] P0,P1,P2,P3,P4,P5,P6;
  if (P1 >= R0)  // Format 1
   asmul1 = 'hE<<28 | asmul2(P0,P1,P2,P3,P4);
  else
   if (P1 == 'hF)  // Update? (S flag),  Format 2
    asmul1 = 'hE<<28 | 1<<20 | asmul2(P0,P2,P3,P4,P5);
   else
    if (P2 != 'hF)  // Format 3
     asmul1 = P1<<28 | asmul2(P0,P2,P3,P4,P5);
    else // Format 4
     asmul1 = P1<<28 | 1<<20 | asmul2(P0,P3,P4,P5,P6);
 endfunction

// Function asmul2 fills the multiplication's register fields.

 function [31:0] asmul2 ();
  input [15:0] opCode, RdL, Q2, Q3, Q4;
   if (opCode==0) // MUL
    if (Q3==0) // MUL  Rd,Rm   where Rs<-Rd and Rd/Rn switched 
     asmul2 =  {RdL[3:0],4'b0,RdL[3:0],4'b1001,Q2[3:0]};
    else  // MUL Rd,Rm,Rs   where Rd/Rn switched 
     asmul2 =  {RdL[3:0],4'b0,Q3[3:0],4'b1001,Q2[3:0]};
   else
    if (opCode==1) // MLA Rd,Rm,Rs,Rn   where Rd/Rn switched
     asmul2 =  {opCode, 1'b0, RdL[3:0],Q4[3:0],Q3[3:0],4'b1001,Q2[3:0]};
    else // 64-bit products UMULL Rd,Rn,Rm,Rs
     asmul2 =  {opCode, 1'b0, Q2[3:0],RdL[3:0],Q4[3:0],4'b1001,Q3[3:0]};
 endfunction

 reg [31:0] progMem[0:25]; // 32 bits per instruction
 reg [31:0] IR;            // Instruction Register
 assign instr = IR;
 
 always @ (posedge(clk))
  IR <= progMem[address];
 always @ (posedge(reset))
 begin
  IP = 0;
  `MUL      R5,R6,R7    `_4 // 0: E0050796
  `MUL      R4,R5       `_3 // 1: E0040495
  `MUL`S    R4,R5       `_4 // 2: E0140495
  `MUL`NE   R1,R2       `_4 // 3: 10010192
  `MUL`GT`S R3,R4       `_5 // 4: C0130394
  `MLA      R2,R3,R4,R5 `_5 // 5: E0225493
  `UMULL    R1,R2,R3,R4 `_5 // 6: E0821493
  `UMLAL    R1,R2,R3,R4 `_5 // 7: E0A21493
  `SMULL    R1,R2,R3,R4 `_5 // 8: E0C21493
  `SMLAL    R1,R2,R3,R4 `_5 // 9: E0E21493
  progMem[25] <= 0;
 end
endmodule 
