// Listing 10.1 uses 9 ARM Data Processing instructions
//   1) Assembles 21-bit "ARM like" Data Processing instructions
//   2) Dumps 21-bit words from memory in hexadecimal
//
// Modules and macros contained in this file:
//   1) CPU_UI: User Interface that dumps 21-bit words from program memory
//   2) Macros for assembling 9 ARM data processing instructions
//   3) ProgMod: Memory containing "ARM" program

//
//---------------- User Interface ----------------
//
module CPU_UI (SW, KEY, LEDR, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5);
 input  [9:0] SW;
 input  [1:0] KEY;
 output [9:0] LEDR;
 output [7:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5;
 function automatic [7:0] digit;
  input [3:0] num; 
  case (num)
   0:  digit = 8'b11000000;  // 0
   1:  digit = 8'b11111001;  // 1
   2:  digit = 8'b10100100;  // 2
   3:  digit = 8'b10110000;  // 3
   4:  digit = 8'b10011001;  // 4
   5:  digit = 8'b10010010;  // 5
   6:  digit = 8'b10000010;  // 6
   7:  digit = 8'b11111000;  // 7
   8:  digit = 8'b10000000;  // 8
   9:  digit = 8'b10010000;  // 9
   10: digit = 8'b10001000;  // A
   11: digit = 8'b10000011;  // b
   12: digit = 8'b11000110;  // C
   13: digit = 8'b10100001;  // d
   14: digit = 8'b10000110;  // E
   15: digit = 8'b10001110;  // F
  endcase
 endfunction
 wire [20:0] IR;
 assign HEX0 = digit(IR[3:0]);   // Rm or constant
 assign HEX1 = digit(IR[7:4]);
 assign HEX2 = digit(IR[11:8]);  // Rd
 assign HEX3 = digit(IR[15:12]);
 assign HEX4 = digit(IR[19:16]); // Rn
 assign HEX5 = digit(IR[20]);    // Immediate flag
 assign LEDR = SW;
 ProgMod (SW[7:0], ~KEY[1], ~KEY[0], IR);
endmodule

//
//---------------- Macro definitions for assembly language ----------------
//
 `define AND asdp (4'd0,  // [Rd] = [Rn] AND (2nd operand)
 `define EOR asdp (4'd1,  // [Rd] = [Rn] Exclusive Or (2nd operand)
 `define SUB asdp (4'd2,  // [Rd] = [Rn] - (2nd operand)
 `define RSB asdp (4'd3,  // [Rd] = (2nd operand) - [Rn]
 `define ADD asdp (4'd4,  // [Rd] = [Rn] + (2nd operand)
 `define ORR asdp (4'd12, // [Rd] = [Rn] Inclusive OR (2nd operand)
 `define MOV asdp (4'd13, // [Rd] = [Rn]
 `define BIC asdp (4'd14, // [Rd] = [Rn] AND NOT (2nd operand)
 `define MVN asdp (4'd15, // [Rd] = NOT [Rn]
 `define _    );            // End of instruction

//
//---------------- Memory containing "ARM" program ----------------
//
module ProgMod (address, clk, reset, instr);
 input  [7:0] address;
 input clk, reset;
 output [20:0] instr;
 parameter R0  = 16'h1000; // General purpose register set names
 parameter R1  = 16'h1001;
 parameter R2  = 16'h1002;
 parameter R3  = 16'h1003;
 parameter R4  = 16'h1004;
 parameter R5  = 16'h1005;
 parameter R6  = 16'h1006;
 parameter R7  = 16'h1007;
 parameter R8  = 16'h1008;
 parameter R9  = 16'h1009;
 parameter R10 = 16'h100A;
 parameter R11 = 16'h100B;
 parameter R12 = 16'h100C;
 parameter R13 = 16'h100D; // a.k.a. "LR"
 parameter R14 = 16'h100E; // a.k.a. "SP"
 parameter R15 = 16'h100F; // a.k.a. "PC"

 integer IP;               // Instruction Pointer for "assembler"
 task asdp ();
  input [15:0] opcode,Rd,Rn,Rm;
  if (Rm < 'h1000)
   progMem[IP] = {1'b1,opcode[3:0],Rn[3:0],Rd[3:0],Rm[7:0]};
  else
   progMem[IP] = {1'b0,opcode[3:0],Rn[3:0],Rd[3:0],Rm[7:0]};
  IP = IP + 1;
 endtask
 
 reg [20:0] progMem[0:25]; // 21 bits per instruction
 reg [20:0] IR;             // Instruction Register
 assign instr = IR;
 
 always @ (posedge(clk))
  IR <= progMem[address];
 always @ (posedge(reset))
 begin
  IP = 0;
  `MOV R1,0,'b0101 `_ // Move 0b0101 into R1
  `MOV R2,0,'b0011 `_ // Move 0b0011 into R2
  `BIC R11,R1,R2   `_ // Not(R2) & (R1) => R11
  `BIC R12,R2,R1   `_ // Not(R1) & (R2) => R12
  `ORR R3,R11,R12  `_ // (R11) | (R12) => R3  
  `EOR R4,R1,R2    `_ // Exclusive OR instruction
  progMem[25] = 0;
 end
endmodule
