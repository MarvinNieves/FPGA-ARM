module CPU_UI (KEY, LEDR);
 input  [1:0] KEY;
 output [9:0] LEDR;
 wire clk,w1,reset;
 nand(clk,KEY[0],w1); // Set up RS FF latch
 nand(w1,KEY[1],clk); // as debounced clock.
 and(reset,~KEY[0],~KEY[1]); // Reset if both keys pushed
 reg [1:0] CPU_state;
 parameter fetch   = 2'b01;
 parameter decode  = 2'b10;
 parameter execute = 2'b11;
 assign LEDR[9:8] = CPU_state;
 reg [11:0] IR;             // Instruction register
 reg [11:0] progMem [0:63]; // Program memory
 reg [5:0] PC;              // Program Counter
 assign LEDR[5:0] = PC;     // (a.k.a., Instruction Pointer)
 reg [3:0] opCode;          // Operation code
 reg [7:0] op2;             // Operand data
 always @ (posedge(clk), posedge(reset))
  begin
   if (reset)
    begin
     progMem [0] <= 12'hD11; // MOV 17
     progMem [1] <= 12'h40C; // ADD 12
     progMem [2] <= 12'h332; // RSB from 50
     progMem [3] <= 12'h404; // ADD 4
     progMem [4] <= 12'h0F8; // AND 8'b11111000
     progMem [5] <= 12'h400; // ADD 0
     PC <= 0;
     CPU_state <= fetch;
    end
   else
    case (CPU_state)
     fetch:                // Get next instruction in program
      begin
       IR <= progMem[PC];  // Load next instruction
       PC <= PC + 1;
       CPU_state <= decode;
      end
     decode:               // Disassemble the instruction 
      begin
       opCode <= IR[11:8]; // Opcode is in upper 4 bits
       op2 <= IR[7:0];     // Operand is in lower 8 bits
       CPU_state <= execute;
      end
     execute:              // Perform desired operation
      CPU_state <= fetch;
    endcase
  end
endmodule
