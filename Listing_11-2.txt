// Listing 11.2: Demonstrates dump of 32-bit words from memory in hexadecimal
//   1) Uses eight 7-segment displays for displaying all 32 bits at a time
//   2) Dumps 32-bit words, all 32 bits at a time from memory in hexadecimal
//
// Modules and macros contained in this file:
//   1) CPU_UI: User Interface that dumps 32-bit words from program memory
//   2) ProgMod: Memory containing 32-bit test patterns

//
//---------------- User Interface ----------------
//
module CPU_UI (SW, KEY, LEDR, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7);
 input  [4:0] SW;
 input  [1:0] KEY;
 output [4:0] LEDR;
 output [7:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;
 function automatic [7:0] digit;
  input [3:0] num; 
  case (num)
   0:  digit = 8'b11000000;  // 0
   1:  digit = 8'b11111001;  // 1
   2:  digit = 8'b10100100;  // 2
   3:  digit = 8'b10110000;  // 3
   4:  digit = 8'b10011001;  // 4
   5:  digit = 8'b10010010;  // 5
   6:  digit = 8'b10000010;  // 6
   7:  digit = 8'b11111000;  // 7
   8:  digit = 8'b10000000;  // 8
   9:  digit = 8'b10010000;  // 9
   10: digit = 8'b10001000;  // A
   11: digit = 8'b10000011;  // b
   12: digit = 8'b11000110;  // C
   13: digit = 8'b10100001;  // d
   14: digit = 8'b10000110;  // E
   15: digit = 8'b10001110;  // F
  endcase
 endfunction
 wire [31:0] IR;
 assign HEX0 = digit(IR[3:0]);
 assign HEX1 = digit(IR[7:4]);
 assign HEX2 = digit(IR[11:8]);
 assign HEX3 = digit(IR[15:12]);
 assign HEX4 = digit(IR[19:16]);
 assign HEX5 = digit(IR[23:20]);
 assign HEX6 = digit(IR[27:24]);
 assign HEX7 = digit(IR[31:28]);
 assign LEDR = SW;
 ProgMod (SW[4:0], ~KEY[1], ~KEY[0], IR);
endmodule

//
//---------------- Memory containing 32-bit words ----------------
//
module ProgMod (address, clk, reset, instr);
 input  [4:0] address;
 input clk, reset;
 output [31:0] instr;
 
 reg [31:0] progMem[0:31]; // 32 bits per instruction
 reg [31:0] IR;            // Instruction Register
 assign instr = IR;
 
 always @ (posedge(clk))
  IR <= progMem[address];
 always @ (posedge(reset))
 begin
  progMem[0] <= 32'h01234567;
  progMem[1] <= 32'h89ABCDEF;
 end
endmodule
