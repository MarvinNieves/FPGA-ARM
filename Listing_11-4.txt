// Listing 11.4 uses 16 ARM Data Processing instructions
//   1) Assembles 32-bit ARM Data Processing instructions
//   2) Dumps 32-bit words from memory in hexadecimal
//
// Modules and macros contained in this file:
//   1) CPU_UI: User Interface that dumps 32-bit words from program memory
//   2) Macros for assembling 16 ARM data processing instructions
//   3) ProgMod: Memory containing set of test instructions

//
//---------------- User Interface ----------------
//
module CPU_UI (SW, KEY, LEDR, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5);
 input  [4:0] SW;
 input  [1:0] KEY;
 output [4:0] LEDR;
 output [7:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5;
 function automatic [7:0] digit;
  input [3:0] num; 
  case (num)
   0:  digit = 8'b11000000;  // 0
   1:  digit = 8'b11111001;  // 1
   2:  digit = 8'b10100100;  // 2
   3:  digit = 8'b10110000;  // 3
   4:  digit = 8'b10011001;  // 4
   5:  digit = 8'b10010010;  // 5
   6:  digit = 8'b10000010;  // 6
   7:  digit = 8'b11111000;  // 7
   8:  digit = 8'b10000000;  // 8
   9:  digit = 8'b10010000;  // 9
   10: digit = 8'b10001000;  // A
   11: digit = 8'b10000011;  // b
   12: digit = 8'b11000110;  // C
   13: digit = 8'b10100001;  // d
   14: digit = 8'b10000110;  // E
   15: digit = 8'b10001110;  // F
  endcase
 endfunction
 wire [31:0] IR;
 assign HEX0 = KEY[1] ? digit(IR[19:16]) : digit(IR[3:0]);
 assign HEX1 = KEY[1] ? digit(IR[23:20]) : digit(IR[7:4]);
 assign HEX2 = KEY[1] ? digit(IR[27:24]) : digit(IR[11:8]);
 assign HEX3 = KEY[1] ? digit(IR[31:28]) : digit(IR[15:12]);
 assign HEX4 = 8'hFF;
 assign HEX5 = 8'hFF;
 assign LEDR = SW;
 ProgMod (SW[4:0], ~KEY[1], ~KEY[0], IR);
endmodule

//
//---------------- Macro definitions for assembly language ----------------
//
 `define AND asdp (4'b0000, // [Rd] = [Rn] AND (2nd operand)
 `define EOR asdp (4'b0001, // [Rd] = [Rn] Exclusive Or (2nd operand)
 `define SUB asdp (4'b0010, // [Rd] = [Rn] - (2nd operand)
 `define RSB asdp (4'b0011, // [Rd] = (2nd operand) - [Rn]
 `define ADD asdp (4'b0100, // [Rd] = [Rn] + (2nd operand)
 `define ADC asdp (4'b0101, // [Rd] = [Rn] + (2nd operand) + C
 `define SBC asdp (4'b0110, // [Rd] = [Rn] (2nd operand) + C - 1
 `define RSC asdp (4'b0111, // [Rd] = (2nd operand) - [Rn] + C - 1
 `define TST asdp (4'b1000, // [Rn] AND (2nd operand) => status bits
 `define TEQ asdp (4'b1001, // [Rn] Exclusive Or (2nd operand) => stats bits
 `define CMP asdp (4'b1010, // [Rn] + (2nd operand) => status bits
 `define CMN asdp (4'b1011, // [Rn] - (2nd operand) => s tatus bits
 `define ORR asdp (4'b1100, // [Rd] = [Rn] Inclusive OR (2nd operand)
 `define MOV asdp (4'b1101, // [Rd] = [Rn]
 `define BIC asdp (4'b1110, // [Rd] = [Rn] AND NOT (2nd operand)
 `define MVN asdp (4'b1111, // [Rd] = NOT [Rn]
 `define _1   ,0,0,0,0,0,0,0);  // End instruction of 1 field
 `define _2   ,0,0,0,0,0,0);    // End instruction of 2 fields
 `define _3   ,0,0,0,0,0);      // End instruction of 3 fields
 `define _4   ,0,0,0,0);        // End instruction of 4 fields
 `define _5   ,0,0,0);          // End instruction of 5 fields
 `define _6   ,0,0);            // End instruction of 6 fields
 `define _7   ,0);              // End instruction of 7 fields
 `define _8   );                // End instruction of 8 fields
 
 `define EQ 4'b0000, // EQual (zero); Z set
 `define NE 4'b0001, // Not Equal (non-zero); Z clear
 `define HS 4'b0010, // Unsigned Higher or Same; C set -- also "CS"
 `define CS 4'b0010, // Carry set
 `define LO 4'b0011, // Unsigned LOwer; C clear --also "CC"
 `define CC 4'b0011, // Carry clear
 `define MI 4'b0100, // MInus or negative; N set
 `define PL 4'b0101, // PLus or positive; N clear
 `define VS 4'b0110, // Overflow; V Set
 `define VC 4'b0111, // No overflow; V Clear
 `define HI 4'b1000, // Unsigned HIgher; C set and Z clear
 `define LS 4'b1001, // Unsigned Lower or Same; C clear or Z set
 `define GE 4'b1010, // Signed Greater than or Equal to; N equals V
 `define LT 4'b1011, // Signed Less Than; N not same as V
 `define GT 4'b1100, // Signed Greater Than; Z clear and N equals V
 `define LE 4'b1101, // Signed Less than or Equal; Z set or N not same as V
 `define AL 4'b1110, // ALways; any status bits OK -- usually omitted
 `define S  4'b1111, // Status update (code for NeVer, i.e., reserved)

//
//---------------- Memory containing "ARM" program ----------------
//
module ProgMod (address, clk, reset, instr);
 input  [4:0] address;
 input clk, reset;
 output [31:0] instr;
 
 parameter R0  = 16'h1000; // General purpose register set names
 parameter R1  = 16'h1001;
 parameter R2  = 16'h1002;
 parameter R3  = 16'h1003;
 parameter R4  = 16'h1004;
 parameter R5  = 16'h1005;
 parameter R6  = 16'h1006;
 parameter R7  = 16'h1007;
 parameter R8  = 16'h1008;
 parameter R9  = 16'h1009;
 parameter R10 = 16'h100A;
 parameter R11 = 16'h100B;
 parameter R12 = 16'h100C;
 parameter R13 = 16'h100D; // a.k.a. "LR"
 parameter R14 = 16'h100E; // a.k.a. "SP"
 parameter R15 = 16'h100F; // a.k.a. "PC"
 integer IP;

// ----- Tasks and Functions that implement the "assembler" -----

// Task asdp is called by the data processing opcode macros `SUB, `AND, ...
// The number of parameters will vary between three and eight.
 // `SUB`EQ`S  R1,R2,R3,LSR,R4  `_8 // General format with 8 parameters
 // `SUB       R1,R2            `_3 // Many parameters are optional

 task asdp ();
  input [15:0] P0,P1,P2,P3,P4,P5,P6,P7;
  progMem[IP] <= asdp1(P0,P1,P2,P3,P4,P5,P6,P7);
  IP = IP + 1;
 endtask

// Function asdp1 is called by task asdp to construct the opcode, condition, and status fields.
 // `SUB      Format 1: Always do subtraction, but don't set status
 // `SUB`S    Format 2: Always do subtraction, and also update status
 // `SUB`EQ   Format 3: Do subtraction only if Z-flag, but don't set status
 // `SUB`EQ`S Format 4: Do subtraction and update status only if Z-flag set

 function [31:0] asdp1 ();
  input [15:0] P0,P1,P2,P3,P4,P5,P6,P7;
  if (P1 >= R0)  // Format 1
   asdp1 = 'hE<<28 | asdp2(P0,P1,P2,P3,P4,P5);
  else
   if (P1 == 'hF)  // Update? (S flag),  Format 2
    asdp1 = 'hE<<28 | 1<<20 | asdp2(P0,P2,P3,P4,P5,P6);
   else
    if (P2 != 'hF)  // Format 3
     asdp1 = P1<<28 | asdp2(P0,P2,P3,P4,P5,P6);
    else // Format 4
     asdp1 = P1<<28 | 1<<20 | asdp2(P0,P3,P4,P5,P6,P7);
 endfunction

// Function asdp2 constructs the instruction's operand fields for function asdp1.
 // `SUB  R1,7      Format 1: Rd = Rd - constant
 // `SUB  R1,R2     Format 2: Rd = Rd - Rm
 // `SUB  R1,R2,7   Format 3: Rd = Rn - constant
 // `SUB  R1,R2,R3  Format 4: Rd = Rn - Rm

 function [31:0] asdp2 ();
  input [15:0] opCode, Q1, Q2, Q3, Q4, Q5;
  if (opCode[3:2]=='b10) // TST, TEQ, CMP, CMN
   asdp2 = opCode<<21 | 1<<20 | asdp3(0, Q1, Q2);
  else
   if (Q3==0)
    if (Q2<R0 | opCode==13)  // R1,7 or mov R1,7
     asdp2 = opCode<<21 | asdp3(Q1, 0, Q2);
    else // R1,R2
     asdp2 = opCode<<21 | asdp3(Q1, Q1, Q2);
   else // R1, R2, R3 or 7
    asdp2 = opCode<<21 | asdp3(Q1, Q2, Q3);
 endfunction

// Function asdp3 fills in the Rd, Rn, and 12-bit second operand field Rm/constant.
 // Note: This function will be more complicated in Chapter 12 with "shifts"

 function [31:0] asdp3 ();
  input [15:0] Rd,Rn,Rm;
   if (Rm<R0) // Rm is a constant?
    asdp3 = 1<<25 | Rd[3:0]<<12 | Rn[3:0]<<16 | Rm[11:0];
   else
    asdp3 = Rd[3:0]<<12 | Rn[3:0]<<16 | Rm[11:0];
 endfunction
 
 reg [31:0] progMem[0:25]; // 32 bits per instruction
 reg [31:0] IR;            // Instruction Register
 assign instr = IR;
 
 always @ (posedge(clk))
  IR <= progMem[address];
 always @ (posedge(reset))
 begin
  IP = 0;
  `MOV      R1,'b0101  `_3 // 0: E3A01005 Move 0b0101 into R1
  `MOV      R2,'b0011  `_3 // 1: E3A02003 Move 0b0011 into R2
  `BIC      R11,R1,R2  `_4 // 2: E1C1B002 Not(R2) & (R1) => R11
  `BIC      R12,R2,R1  `_4 // 3: E1C2C001 Not(R1) & (R2) => R12
  `ORR      R3,R11,R12 `_4 // 4: E18B300C (R11) | (R12) => R3  
  `EOR      R4,R1,R2   `_4 // 5: E0214002 Exclusive OR instruction
  `SUB      R5,R6,7    `_4 // 6: E2465007 Always subtract, but no status
  `SUB`S    R5,R6,7    `_5 // 7: E2565007 Always subtract, update status
  `SUB`EQ   R5,R6,7    `_5 // 8: 02465007 If Z-flag, subtract, but no status
  `SUB`EQ`S R5,R6,7    `_6 // 9: 02565007 If Z-flag, subtract, update status
  `MOV      R5,25      `_3 // A: E3A05019 Rd = constant
  `MOV      R5,R6      `_3 // B: E1A05006 Rd = Rm
  `ADD      R5,R6,25   `_4 // C: E2865019 Rd = Rn + constant
  `ADD      R5,R6,R9   `_4 // D: E0865009 Rd = Rn + Rm
  `TST      R1,'b0101  `_3 // E: E3110005 Test 0b0101 into R1
  `CMP      R2,25      `_3 // F: E3520019 Compare
  `ADC      R11,R1     `_3 // 10: E0ABB001 Add with carry
  `SBC`EQ   R12,R2     `_4 // 11: 00CCC002 Subtract with carry
  progMem[25] <= 0;
 end
endmodule
