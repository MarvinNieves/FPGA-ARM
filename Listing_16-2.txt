// Listing 16.2 has assembly of load/store instructions scaled offsets
//   1) Assembles ARM load/store instructions with shifts in offsets
//   2) Dumps 32-bit words from program memory in hexadecimal
//
// Modules and macros contained in this file:
//   1) CPU_UI: User Interface that dumps all 32 bits of word at one time
//   2) Macros for only assembling ARM LDR/STR/LDRB/STRB instructions
//   3) ProgMod: Memory containing "ARM" program

//
//---------------- User Interface ----------------
//
module CPU_UI (SW, KEY, LEDR, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7);
 input  [6:0] SW;
 input  [1:0] KEY;
 output [6:0] LEDR;
 output [7:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;
 function automatic [7:0] digit;
  input [3:0] num; 
  case (num)
   0:  digit = 8'b11000000;  // 0
   1:  digit = 8'b11111001;  // 1
   2:  digit = 8'b10100100;  // 2
   3:  digit = 8'b10110000;  // 3
   4:  digit = 8'b10011001;  // 4
   5:  digit = 8'b10010010;  // 5
   6:  digit = 8'b10000010;  // 6
   7:  digit = 8'b11111000;  // 7
   8:  digit = 8'b10000000;  // 8
   9:  digit = 8'b10010000;  // 9
   10: digit = 8'b10001000;  // A
   11: digit = 8'b10000011;  // b
   12: digit = 8'b11000110;  // C
   13: digit = 8'b10100001;  // d
   14: digit = 8'b10000110;  // E
   15: digit = 8'b10001110;  // F
  endcase
 endfunction
 wire [31:0] IR;
 assign HEX0 = digit(IR[3:0]);
 assign HEX1 = digit(IR[7:4]);
 assign HEX2 = digit(IR[11:8]);
 assign HEX3 = digit(IR[15:12]);
 assign HEX4 = digit(IR[19:16]);
 assign HEX5 = digit(IR[23:20]);
 assign HEX6 = digit(IR[27:24]);
 assign HEX7 = digit(IR[31:28]);
 assign LEDR = SW;
 ProgMod (SW[6:0], ~KEY[1], ~KEY[0], IR);
endmodule

//
//---------------- Macro definitions for assembly language ----------------
//
 `define _1   ,0,0,0,0,0,0,0);  // End instruction of 1 field
 `define _2   ,0,0,0,0,0,0);    // End instruction of 2 fields
 `define _3   ,0,0,0,0,0);      // End instruction of 3 fields
 `define _4   ,0,0,0,0);        // End instruction of 4 fields
 `define _5   ,0,0,0);          // End instruction of 5 fields
 `define _6   ,0,0);            // End instruction of 6 fields
 `define _7   ,0);              // End instruction of 7 fields
 `define _8   );                // End instruction of 8 fields
 `define STR   asmem (3'b000, // Store full 32-bit R register
 `define STRB  asmem (3'b100, // Store low-order byte in register
 `define LDR   asmem (3'b001, // Load full 32-bit R register
 `define LDRB  asmem (3'b101, // Load lower 8 bits and zero fill
 `define IB  6'b110000, // Increment Before
 `define IBW 6'b110010, // Increment Before with write back
 `define IA  6'b100000, // Increment After (Implies write back)
 
 `define EQ 4'b0000, // EQual (zero); Z set
 `define NE 4'b0001, // Not Equal (non-zero); Z clear
 `define HS 4'b0010, // Unsigned Higher or Same; C set -- also "CS"
 `define CS 4'b0010, // Carry set
 `define LO 4'b0011, // Unsigned LOwer; C clear --also "CC"
 `define CC 4'b0011, // Carry clear
 `define MI 4'b0100, // MInus or negative; N set
 `define PL 4'b0101, // PLus or positive; N clear
 `define VS 4'b0110, // Overflow; V Set
 `define VC 4'b0111, // No overflow; V Clear
 `define HI 4'b1000, // Unsigned HIgher; C set and Z clear
 `define LS 4'b1001, // Unsigned Lower or Same; C clear or Z set
 `define GE 4'b1010, // Signed Greater than or Equal to; N equals V
 `define LT 4'b1011, // Signed Less Than; N not same as V
 `define GT 4'b1100, // Signed Greater Than; Z clear and N equals V
 `define LE 4'b1101, // Signed Less than or Equal; Z set or N not same as V
 `define AL 4'b1110, // ALways; any status bits OK -- usually omitted
 `define S  4'b1111, // Status update (code for NeVer, i.e., reserved)

//
//---------------- Memory containing "ARM" program ----------------
//
module ProgMod (adr, clk, reset, instr);
 input  [6:0] adr;
 input clk, reset;
 output [31:0] instr;
 
 parameter R0  = 16'h1000; // General purpose register set names
 parameter R1  = 16'h1001;
 parameter R2  = 16'h1002;
 parameter R3  = 16'h1003;
 parameter R4  = 16'h1004;
 parameter R5  = 16'h1005;
 parameter R6  = 16'h1006;
 parameter R7  = 16'h1007;
 parameter R8  = 16'h1008;
 parameter R9  = 16'h1009;
 parameter R10 = 16'h100A;
 parameter R11 = 16'h100B;
 parameter R12 = 16'h100C;
 parameter R13 = 16'h100D; // a.k.a. "SP"
 parameter R14 = 16'h100E; // a.k.a. "LR"
 parameter R15 = 16'h100F; // a.k.a. "PC"

 parameter LSL = 16'h1000;  // Logical Shift Left
 parameter LSR = 16'h1001;  // Logical Shift Right
 parameter ASR = 16'h1002;  // Algebraic Shift Right
 parameter ROR = 16'h1003;  // Rotate (circular) Right


// ----- Tasks and Functions that implement the "assembler" -----

// Task asmem is called by load/store opcode macros `LDR, `STR, ...
// The number of parameters will vary between three and eight.
 // `LDR`EQ`IA  R1,(R2),R3,LSL,4  `_8 // General format with 8 parameters
 // `LDR        R1,(R2)           `_3 // Many parameters are optional

 task asmem ();
  input [15:0] P0,P1,P2,P3,P4,P5,P6,P7;
  {progMem[IP+3],progMem[IP+2],progMem[IP+1],progMem[IP]}
   <= asmem1(P0,P1,P2,P3,P4,P5,P6,P7);
  IP = IP + 4;
 endtask

// Function asmem1 is called by task asmem to construct the opcode, condition, and status fields.
 // `LDR       Format 1: Always load register, but don't update base register
 // `LDR`IA    Format 2: Always load register, and also update base register
 // `LDR`EQ    Format 3: Load register only if Z-flag, but don't update base register
 // `LDR`EQ`IA Format 4: Load register and update base register only if Z-flag set

 function [31:0] asmem1 ();
  input [15:0] P0,P1,P2,P3,P4,P5,P6,P7;
  if (P1 >= R0)  // Format 1
   asmem1 = 'hE<<28 | asmem2(P0|8'h10,P1,P2,P3,P4,P5);
  else
   if (P1 > 'hF)  // `IA,`B,`IBW;  Format 2
    asmem1 = 'hE<<28 | asmem2(P0|P1,P2,P3,P4,P5,P6);
   else
    if (P2 >= R0)  // Format 3
     asmem1 = P1<<28 | asmem2(P0|8'h10,P2,P3,P4,P5,P6);
    else // Format 4
     asmem1 = P1<<28 | asmem2(P0|P2,P3,P4,P5,P6,P7);
 endfunction

// Function asmem2 constructs the instruction's operand fields for function asmem1.
 // `LDR  R1,(R2),R3,LSL,4  Format 1: Offset is scaled register
 // `LDR  R1,(R2),-4        Format 2: Offset is constant

 function [31:0] asmem2 ();
  input [15:0] PUBWL, Q1, Q2, Q3, Q4, Q5;
  if (Q3>=R0&&Q3<=R15) // Offset is scaled register
   asmem2 = {8'H68|PUBWL[4:0],Q2[3:0],Q1[3:0],Q5[4:0],Q4[1:0],Q3[4:0]};
  else
   if (Q3[12]==0) // Positive constant offset
    asmem2 = {8'H48|PUBWL[4:0],Q2[3:0],Q1[3:0],Q3[11:0]};
   else // Negative constant offset
    asmem2 = {8'H40|PUBWL[4:0],Q2[3:0],Q1[3:0],-Q3[11:0]};
 endfunction

 integer IP; 

 reg [7:0] progMem[0:99];  // 4 bytes per instruction
 reg [31:0] IR;            // Instruction Register
 assign instr = IR;
 
 always @ (posedge(clk))
  IR <= {progMem[adr+3],progMem[adr+2],progMem[adr+1],progMem[adr]};
 always @ (posedge(reset))
 begin
  IP = 0;
  `STRB`IBW   R2,(R4),1         `_5 // 00: E5E42001 strb  R2,[R4, #1]!
  `LDRB`IA    R5,(R4),-1        `_5 // 04: E4545001 ldrb  R5,[R4], #-1
  `STRB`IB    R2,(R4),R3,LSL,2  `_7 // 08: E7C42103 strb  R2,[R4,R3,LSL #2]
  `STR`EQ`IBW R1,(R2),R3,LSL,10 `_8 // 0C: 07A21503 streq R1,[R2,R3,LSL #10]!
  `STRB`IB    R2,(R4),R3,ROR,2  `_7 // 10: E7C42163 strb  R2,[R4,R3,ROR #2]
  `LDR        R4,(R5)           `_3 // 14: E5954000 
  `LDR`GT     R4,(R5)           `_4 // 18: C5954000
  `LDRB       R4,(R5)           `_3 // 1C: E5D54000
  `STR        R1,(R2)           `_3 // 20: E5821000
  `STRB       R1,(R2)           `_3 // 24: E5C21000
  progMem[99] <= 0;
 end
endmodule 
