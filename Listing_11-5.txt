// Listing 11.5 demonstrates XOR program using 32-bit registers
//   1) Assembles 32-bit ARM Data Processing instructions
//   2) Executes 32-bit "XOR" example program
//   3) Dumps contents of 6 registers in hexadecimal
//      (lower 4 bits of R1, R2, R11, R12, R3, R4)
//
// Modules and macros contained in this file:
//   1) CPU_UI: User Interface that dumps 32-bit words from program memory
//   2) CPU: 32-bit "ARM like" CPU with all 16 data processing instructions
//   3) DataProcIns: 16 "ARM like" DP instructions using 32-bit registers
//   4) Macros for assembling 16 ARM data processing instructions
//   5) ProgMod: Memory containing parameters and functions from
//      Listing 11.4 and also has the XOR demonstration from Listing 10.2

//
//---------------- User Interface ----------------
//
module CPU_UI (KEY, CLOCK_50, LEDR, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5);
 input  [1:0] KEY;
 input CLOCK_50;
 output [9:0] LEDR;
 output [7:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5;
 function automatic [7:0] digit;
  input [3:0] num; 
  case (num)
   0:  digit = 8'b11000000;  // 0
   1:  digit = 8'b11111001;  // 1
   2:  digit = 8'b10100100;  // 2
   3:  digit = 8'b10110000;  // 3
   4:  digit = 8'b10011001;  // 4
   5:  digit = 8'b10010010;  // 5
   6:  digit = 8'b10000010;  // 6
   7:  digit = 8'b11111000;  // 7
   8:  digit = 8'b10000000;  // 8
   9:  digit = 8'b10010000;  // 9
   10: digit = 8'b10001000;  // A
   11: digit = 8'b10000011;  // b
   12: digit = 8'b11000110;  // C
   13: digit = 8'b10100001;  // d
   14: digit = 8'b10000110;  // E
   15: digit = 8'b10001110;  // F
  endcase
 endfunction
 wire [23:0] hexDisp;
 wire reset;
 and(reset,~KEY[0],~KEY[1]); // Reset if both keys pushed
 assign HEX0 = digit(hexDisp[3:0]);
 assign HEX1 = digit(hexDisp[7:4]);
 assign HEX2 = digit(hexDisp[11:8]);
 assign HEX3 = digit(hexDisp[15:12]);
 assign HEX4 = digit(hexDisp[19:16]);
 assign HEX5 = digit(hexDisp[23:20]);
 CPU (KEY, reset, CLOCK_50, LEDR, hexDisp);
endmodule

//
//---------------- "ARM" CPU imitation ----------------
//
module CPU (KEY, reset, clk, LEDR, hexDisp);
 input  [1:0] KEY;
 input  reset, clk;
 output [9:0] LEDR;
 output [23:0] hexDisp;
 assign hexDisp[3:0] = R[1];
 assign hexDisp[7:4] = R[2];
 assign hexDisp[11:8] = R[11];
 assign hexDisp[15:12] = R[12];
 assign hexDisp[19:16] = R[3];
 assign hexDisp[23:20] = R[4];
 assign LEDR[5:0] = PCir[5:0];   // Address of current instruction
 assign LEDR[9:6] = CPSR[31:28]; // N, Z, C, V status bits

 // Clock, reset, and breakpoint
 
 reg run; // Flag indicating CPU is running

 // CPU instruction cycle
 
 reg [1:0] CPU_state;
 parameter fetch     = 2'b01;
 parameter decode    = 2'b10;
 parameter execute   = 2'b11;
 parameter writeBack = 2'b00;

 // Instruction format
 
 wire [3:0] opCode; // Operation code value
 wire iFlag; // Immediate data flag
 wire SU;    // Update status flag
 wire [3:0] cond; // Condition code in instruction.
 wire [11:0] op2; // Second operand raw code
 wire [31:0] RdVal_DP; // Destination register value
 reg  [31:0] RnVal; // Source data register value
 reg  [31:0] RmVal; // 2nd op data register value
 wire [3:0] RdID; // Destination register number
 wire [3:0] RnID; // Source register number
 wire [3:0] RmID; // Second operand register number
 wire [31:0] IR; // Instruction register
 assign cond   = IR[31:28];  // Conditions needed to execute
 assign iFlag  = IR[25]; // Immediate data flag
 assign opCode = IR[24:21]; // Opcode is in upper 4 bits
 assign SU     = IR[20]; // Update status flag
 assign RnID   = IR[19:16]; // Source data register
 assign RdID   = IR[15:12]; // Destination register
 assign RmID   = IR[3:0]; // 2nd operand register
 assign op2    = IR[11:0]; // Operand is in lower 12 bits
 
 // General purpose registers R0 - R15

 reg [31:0] R[0:15]; // 16 registers
 parameter PC = 15; // Program Counter
 
 // Current Program Status Register (CPSR)
 
 reg [31:0] CPSR;
 wire [31:0] CPSR_DP;
 wire N_flag, Z_flag, C_flag, V_flag;
 assign N_flag = CPSR[31]; // Negative condition
 assign Z_flag = CPSR[30]; // Zero condition
 assign C_flag = CPSR[29]; // Carry condition
 assign V_flag = CPSR[28]; // Overflow condition
 reg ok2exe;
 reg [31:0] PCir;
 wire RdVal_DPU;
 
 // Instantiate program memory and ALU processing
 
 ProgMod (R[PC], CPU_state==fetch, reset, IR);
 DataProcIns (opCode, RnVal, RmVal, op2, iFlag, CPU_state==execute, CPSR, RdVal_DP, RdVal_DPU, CPSR_DP);
 
 // Instruction cycle and reset
 
 always @ (posedge(clk), posedge(reset))
  begin
   if (reset)
    begin
     R[PC] <= 0; // Boot address is 0000
     CPU_state <= fetch;
    end
   else
    case (CPU_state)
     fetch:   // Get next instruction in program
      begin
       PCir <= R[PC];
       R[PC] <= R[PC] + 1;
       CPU_state <= decode;
      end
     decode:  // Disassemble the instruction 
      begin
       RnVal <= R[RnID]; // Source data register
       RmVal <= R[RmID]; // 2nd op data register
       if (~KEY[0]) // Instruction cycle interlock
        run <= 0;
       if (~KEY[1] && ~run)
        begin
         run <= 1;
         case (cond)
          0: ok2exe <=  Z_flag;      // EQual (zero); Z set
          1: ok2exe <=  ~Z_flag;     // Not Equal (non-zero); Z clear
          2: ok2exe <=  C_flag;      // Carry Set (Unsigned Higher or Same)
          3: ok2exe <=  ~C_flag;     // Carry Clear (Unsigned LOwer)
          4: ok2exe <=  N_flag;      // MInus or negative; N set
          5: ok2exe <=  ~N_flag;     // PLus or positive; N clear
          6: ok2exe <=  V_flag;      // Overflow; V Set
          7: ok2exe <=  ~V_flag;     // No overflow; V Clear
          8: ok2exe <=  C_flag & ~Z_flag;  // Unsigned HIgher; C set and Z clear
          9: ok2exe <=  ~C_flag | Z_flag;  // Unsigned Lower or Same
          10: ok2exe <=  N_flag == V_flag; // Signed Greater than or Equal to
          11: ok2exe <=  N_flag != V_flag; // Signed Less Than
          12: ok2exe <=  ~Z_flag & (N_flag==V_flag); // Signed Greater Than
          13: ok2exe <=  Z_flag | (N_flag!=V_flag);  // Signed Less than or Equal
          14: ok2exe <=  1;          // ALways; any status bits ok2exe
         endcase
         CPU_state <= execute;
        end
      end
     execute: // Perform desired operation
      CPU_state <= ok2exe ? writeBack : fetch;
     writeBack: // Update specific register
      begin
       if (RdVal_DPU) R[RdID] <= RdVal_DP; // Destination register
       if (SU) CPSR <= CPSR_DP;
       CPU_state <= fetch;
      end
    endcase
  end
endmodule

//
//---------------- ALU for ARM data processing instructions ----------------
//
module DataProcIns (opCode, Rn, Rm, op2raw, iFlag, clk, CPSR, Rd, RdVal_DPU, CPSR_DP);
 input [3:0] opCode; // Data processing instruction opcode
 input [31:0] Rn; // Source register contents
 input [31:0] Rm; // Possible 2nd operand register contents
 input [11:0] op2raw; // Second operand "as is"
 input  iFlag; // Immediate value flag
 input  clk; // Pulse to produce calculation
 output reg [31:0] Rd; // Value to return
 
 // Current Program Status Register (CPSR)
 
 input [31:0] CPSR;
 output [31:0] CPSR_DP;
 output RdVal_DPU;
 reg C;
 wire N, Z, V, CI;
 assign CI = CPSR[29]; // Carry (In) condition
 assign CPSR_DP[31] = N; // Negative condition
 assign CPSR_DP[30] = Z; // Zero condition
 assign CPSR_DP[29] = C; // Carry (Out) condition
 assign CPSR_DP[28] = V; // Overflow condition
 reg RdVal_DP;

 wire  [31:0] op2; // Calculated value of second operand
 assign op2 = (iFlag) ? op2raw : Rm;
 assign RdVal_DPU = opCode < 8 | opCode > 11;
 assign N = Rd[31];
 assign Z = (Rd) ? 0 : 1;
 assign V = Rd[31] ^ Rd[30];
 always @ (posedge(clk))
  case (opCode)
   0:  {C,Rd} <= Rn & op2;      // AND
   1:  {C,Rd} <= Rn ^ op2;      // EOR (exclusive OR)
   2:  {C,Rd} <= Rn - op2;      // SUB
   3:  {C,Rd} <= op2 - Rn;      // RSB (reverse subtract)
   4:  {C,Rd} <= Rn + op2;      // ADD
   5:  {C,Rd} <= Rn + op2 + CI; // ADC Add with carry
   6:  {C,Rd} <= Rn - op2 - CI; // SBC Subtract with carry
   7:  {C,Rd} <= op2 - Rn - CI; // RSC (reverse SUB with carry)
   8:  {C,Rd} <= Rn & op2;      // TST Test (like AND)
   9:  {C,Rd} <= Rn ^ op2;      // TEQ Test Equal (like EOR)
   10: {C,Rd} <= Rn - op2;      // CMP Compare (like SUB)
   11: {C,Rd} <= Rn + op2;      // CMN Compare Negative (like ADD)
   12: {C,Rd} <= Rn | op2;      // ORR (inclusive OR)
   13: {C,Rd} <= op2;           // MOV
   14: {C,Rd} <= Rn & ~op2;     // BIC (bit clear)
   15: {C,Rd} <= ~op2;          // MVN (move NOT)
  endcase
endmodule

//
//---------------- Macro definitions for assembly language ----------------
//
 `define AND asdp (4'b0000, // [Rd] = [Rn] AND (2nd operand)
 `define EOR asdp (4'b0001, // [Rd] = [Rn] Exclusive Or (2nd operand)
 `define SUB asdp (4'b0010, // [Rd] = [Rn] - (2nd operand)
 `define RSB asdp (4'b0011, // [Rd] = (2nd operand) - [Rn]
 `define ADD asdp (4'b0100, // [Rd] = [Rn] + (2nd operand)
 `define ADC asdp (4'b0101, // [Rd] = [Rn] + (2nd operand) + C
 `define SBC asdp (4'b0110, // [Rd] = [Rn] (2nd operand) + C - 1
 `define RSC asdp (4'b0111, // [Rd] = (2nd operand) - [Rn] + C - 1
 `define TST asdp (4'b1000, // [Rn] AND (2nd operand) => status bits
 `define TEQ asdp (4'b1001, // [Rn] Exclusive Or (2nd operand) => stats bits
 `define CMP asdp (4'b1010, // [Rn] + (2nd operand) => status bits
 `define CMN asdp (4'b1011, // [Rn] - (2nd operand) => s tatus bits
 `define ORR asdp (4'b1100, // [Rd] = [Rn] Inclusive OR (2nd operand)
 `define MOV asdp (4'b1101, // [Rd] = [Rn]
 `define BIC asdp (4'b1110, // [Rd] = [Rn] AND NOT (2nd operand)
 `define MVN asdp (4'b1111, // [Rd] = NOT [Rn]
 `define _1   ,0,0,0,0,0,0,0);  // End instruction of 1 field
 `define _2   ,0,0,0,0,0,0);    // End instruction of 2 fields
 `define _3   ,0,0,0,0,0);      // End instruction of 3 fields
 `define _4   ,0,0,0,0);        // End instruction of 4 fields
 `define _5   ,0,0,0);          // End instruction of 5 fields
 `define _6   ,0,0);            // End instruction of 6 fields
 `define _7   ,0);              // End instruction of 7 fields
 `define _8   );                // End instruction of 8 fields
 
 `define EQ 4'b0000, // EQual (zero); Z set
 `define NE 4'b0001, // Not Equal (non-zero); Z clear
 `define HS 4'b0010, // Unsigned Higher or Same; C set -- also "CS"
 `define CS 4'b0010, // Carry set
 `define LO 4'b0011, // Unsigned LOwer; C clear --also "CC"
 `define CC 4'b0011, // Carry clear
 `define MI 4'b0100, // MInus or negative; N set
 `define PL 4'b0101, // PLus or positive; N clear
 `define VS 4'b0110, // Overflow; V Set
 `define VC 4'b0111, // No overflow; V Clear
 `define HI 4'b1000, // Unsigned HIgher; C set and Z clear
 `define LS 4'b1001, // Unsigned Lower or Same; C clear or Z set
 `define GE 4'b1010, // Signed Greater than or Equal to; N equals V
 `define LT 4'b1011, // Signed Less Than; N not same as V
 `define GT 4'b1100, // Signed Greater Than; Z clear and N equals V
 `define LE 4'b1101, // Signed Less than or Equal; Z set or N not same as V
 `define AL 4'b1110, // ALways; any status bits OK -- usually omitted
 `define S  4'b1111, // Status update (code for NeVer, i.e., reserved)

//
//---------------- Memory containing "ARM" program ----------------
//
module ProgMod (address, clk, reset, instr);
 input  [4:0] address;
 input clk, reset;
 output [31:0] instr;
 
 parameter R0  = 16'h1000; // General purpose register set names
 parameter R1  = 16'h1001;
 parameter R2  = 16'h1002;
 parameter R3  = 16'h1003;
 parameter R4  = 16'h1004;
 parameter R5  = 16'h1005;
 parameter R6  = 16'h1006;
 parameter R7  = 16'h1007;
 parameter R8  = 16'h1008;
 parameter R9  = 16'h1009;
 parameter R10 = 16'h100A;
 parameter R11 = 16'h100B;
 parameter R12 = 16'h100C;
 parameter R13 = 16'h100D; // a.k.a. "SP"
 parameter R14 = 16'h100E; // a.k.a. "LR"
 parameter R15 = 16'h100F; // a.k.a. "PC"
 integer IP;

// ----- Tasks and Functions that implement the "assembler" -----

// Task asdp is called by the data processing opcode macros `SUB, `AND, ...
// The number of parameters will vary between three and eight.
 // `SUB`EQ`S  R1,R2,R3,LSR,R4  `_8 // General format with 8 parameters
 // `SUB       R1,R2            `_3 // Many parameters are optional

 task asdp ();
  input [15:0] P0,P1,P2,P3,P4,P5,P6,P7;
  progMem[IP] <= asdp1(P0,P1,P2,P3,P4,P5,P6,P7);
  IP = IP + 1;
 endtask

// Function asdp1 is called by task asdp to construct the opcode, condition, and status fields.
 // `SUB      Format 1: Always do subtraction, but don't set status
 // `SUB`S    Format 2: Always do subtraction, and also update status
 // `SUB`EQ   Format 3: Do subtraction only if Z-flag, but don't set status
 // `SUB`EQ`S Format 4: Do subtraction and update status only if Z-flag set

 function [31:0] asdp1 ();
  input [15:0] P0,P1,P2,P3,P4,P5,P6,P7;
  if (P1 >= R0)  // Format 1
   asdp1 = 'hE<<28 | asdp2(P0,P1,P2,P3,P4,P5);
  else
   if (P1 == 'hF)  // Update? (S flag),  Format 2
    asdp1 = 'hE<<28 | 1<<20 | asdp2(P0,P2,P3,P4,P5,P6);
   else
    if (P2 != 'hF)  // Format 3
     asdp1 = P1<<28 | asdp2(P0,P2,P3,P4,P5,P6);
    else // Format 4
     asdp1 = P1<<28 | 1<<20 | asdp2(P0,P3,P4,P5,P6,P7);
 endfunction

// Function asdp2 constructs the instruction's operand fields for function asdp1.
 // `SUB  R1,7      Format 1: Rd = Rd - constant
 // `SUB  R1,R2     Format 2: Rd = Rd - Rm
 // `SUB  R1,R2,7   Format 3: Rd = Rn - constant
 // `SUB  R1,R2,R3  Format 4: Rd = Rn - Rm

 function [31:0] asdp2 ();
  input [15:0] opCode, Q1, Q2, Q3, Q4, Q5;
  if (opCode[3:2]=='b10) // TST, TEQ, CMP, CMN
   asdp2 = opCode<<21 | 1<<20 | asdp3(0, Q1, Q2);
  else
   if (Q3==0)
    if (opCode==13)  // mov R1,R2 or 7
     asdp2 = opCode<<21 | asdp3(Q1, 0, Q2);
    else // R1,R2 or 7
     asdp2 = opCode<<21 | asdp3(Q1, Q1, Q2);
   else // R1, R2, R3 or 7
    asdp2 = opCode<<21 | asdp3(Q1, Q2, Q3);
 endfunction

// Function asdp3 fills in the Rd, Rn, and 12-bit second operand field Rm/constant.
 // Note: This function will be more complicated in Chapter 12 with "shifts"

 function [31:0] asdp3 ();
  input [15:0] Rd,Rn,Rm;
   if (Rm<R0) // Rm is a constant?
    asdp3 = 1<<25 | Rd[3:0]<<12 | Rn[3:0]<<16 | Rm[11:0];
   else
    asdp3 = Rd[3:0]<<12 | Rn[3:0]<<16 | Rm[11:0];
 endfunction
 
 reg [31:0] progMem[0:25]; // 32 bits per instruction
 reg [31:0] IR;            // Instruction Register
 assign instr = IR;
 
 always @ (posedge(clk))
  IR <= progMem[address];
 always @ (posedge(reset))
 begin
  IP = 0;
  `MOV      R1,'b0101  `_3 // 0: E3A01005 Move 0b0101 into R1
  `MOV      R2,'b0011  `_3 // 1: E3A02003 Move 0b0011 into R2
  `BIC      R11,R1,R2  `_4 // 2: E1C1B002 Not(R2) & (R1) => R11
  `BIC      R12,R2,R1  `_4 // 3: E1C2C001 Not(R1) & (R2) => R12
  `ORR      R3,R11,R12 `_4 // 4: E18B300C (R11) | (R12) => R3  
  `EOR      R4,R1,R2   `_4 // 5: E0214002 Exclusive OR instruction
  progMem[25] = 0;
 end
endmodule
